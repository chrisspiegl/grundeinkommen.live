extends layout
block content

  .flexContainer#masterFlex
    .container#changeorg
      h2 Change.org
      h1 #{numeral(changeorg.current.value).format('0,0')} Menschen sind für 6 Monate Grundeinkommen
      p Bei der Petition geht es darum, insbesondere wegen der Corona Krise, für die kommenden 6 Monate ein Grundeinkommen für alle Bürger einzuführen. #[a(href="https://www.change.org/p/finanzminister-olaf-scholz-und-wirtschaftsminister-peter-altmaier-mit-dem-bedingungslosen-grundeinkommen-durch-die-coronakrise-coronavirusde-olafscholz-peteraltmaier") Alle Informationen & Unterschreiben].
      .flexContainer.two
        .flexColumn
          h4.title Letzte 24 Stunden
          p.data= numeral(changeorg.last24h).format('0,0')
            br
            | neue Unterschriften
        .flexColumn
          h4.title Letzte Stunde
          p.data= numeral(changeorg.last1h).format('0,0')
            br
            | neue Unterschriften
      div.charts.center
        button.toggle()
          span.daily.active Daily
          = ' / '
          span.hourly Hourly
        canvas.chartjs.chartDaily#chartChangeorgDaily
        canvas.chartjs.chartHourly.hidden#chartChangeorgHourly
      p Die Daten sind ab 21.3. pro Stunde aufgeführt. Vorhergehende Daten sind nur in größeren Sprüngen verfügbar.
      .flexContainer.two
        p.flexColumn.source.center
          a(href="https://www.change.org/p/finanzminister-olaf-scholz-und-wirtschaftsminister-peter-altmaier-mit-dem-bedingungslosen-grundeinkommen-durch-die-coronakrise-coronavirusde-olafscholz-peteraltmaier") Quelle
        p.flexColumn.center Letztes Update #[abbr(title=moment(changeorg.current.createdAt).tz('Europe/Berlin')) #{moment(changeorg.current.createdAt).tz('Europe/Berlin').locale('de').fromNow()}]

    .container#bundestag
      h2 Bundestag
      h1 #{numeral(bundestag.current.value).format('0,0')} Menschen sind für Grundeinkommen in der Krise
      p Bei der Petition geht es darum, insbesondere wegen der Corona Krise, für die Zeit der Krise ein Grundeinkommen für alle Bürger einzuführen. #[a(href="https://epetitionen.bundestag.de/petitionen/_2020/_03/_14/Petition_108191.nc.html") Alle Informationen & Unterschreiben].
      .flexContainer.two
        .flexColumn
          h4.title Letzte 24 Stunden
          p.data= numeral(bundestag.last24h).format('0,0')
            br
            | neue Unterschriften
        .flexColumn
          h4.title Letzte Stunde
          p.data= numeral(bundestag.last1h).format('0,0')
            br
            | neue Unterschriften
      div.charts.center
        button.toggle()
          span.daily.active Daily
          = ' / '
          span.hourly Hourly
        canvas.chartjs.chartDaily#chartBundestagDaily
        canvas.chartjs.chartHourly.hidden#chartBundestagHourly
      p Die Daten sind ab 31.3. pro Stunde aufgeführt.
      .flexContainer.two
        p.flexColumn.source.center
          a(href="https://epetitionen.bundestag.de/petitionen/_2020/_03/_14/Petition_108191.nc.html") Quelle
        p.flexColumn.center Letztes Update #[abbr(title=moment(bundestag.current.createdAt).tz('Europe/Berlin')) #{moment(bundestag.current.createdAt).tz('Europe/Berlin').locale('de').fromNow()}]

    .container#youmove
      h2 You.WeMove.eu
      h1 #{numeral(youmove.current.value).format('0,0')} Menschen sind für Notfall-Grundeinkommen für die EU - jetzt!
      p Bei der Petition geht es darum, insbesondere wegen der Corona Krise, in der EU ein Grundeinkommen für alle Bürger ein zu führen. #[a(href="https://you.wemove.eu/campaigns/notfall-grundeinkommen") Alle Informationen & Unterschreiben].
      .flexContainer.two
        .flexColumn
          h4.title Letzte 24 Stunden
          p.data= numeral(youmove.last24h).format('0,0')
            br
            | neue Unterschriften
        .flexColumn
          h4.title Letzte Stunde
          p.data= numeral(youmove.last1h).format('0,0')
            br
            | neue Unterschriften
      div.charts.center
        button.toggle()
          span.daily.active Daily
          = ' / '
          span.hourly Hourly
        canvas.chartjs.chartDaily#chartYoumoveDaily
        canvas.chartjs.chartHourly.hidden#chartYoumoveHourly
      p Die Daten sind ab 21.3. pro Stunde aufgeführt.
      .flexContainer.two
        p.flexColumn.source.center
          a(href="https://you.wemove.eu/campaigns/notfall-grundeinkommen") Quelle
        p.flexColumn.center Letztes Update #[abbr(title=moment(youmove.current.createdAt).tz('Europe/Berlin')) #{moment(youmove.current.createdAt).tz('Europe/Berlin').locale('de').fromNow()}]


  .container
    h2 Mein-Grundeinkommen.de
    h1 Durch #{numeral(meinbge.donors.current.value).format('0,0')} Unterstützer wurden bereits #{numeral(meinbge.grundeinkommen.current.value).format('0,0')} Grundeinkommen finanziert.
    p Seit Jahren verlost #[a(href="https://www.mein-grundeinkommen.de/") MeinBGE.de] regelmäßig Grundeinkommen in Höhe von 1.000€ pro Monat für 12 Monate an Teilnehmer und will damit im Realversuch zeigen welchen Einfluss ein Grundeinkommen auf Menschen und ihre Umwelt hat. #[a(href="https://www.mein-grundeinkommen.de/") Jetzt an der nächsten Verlosung teilnehmen].
    .flexContainer.two
      p.flexColumn.source.center
        a(href="https://www.mein-grundeinkommen.de/") Quelle
      p.flexColumn.center Letztes Update #[abbr(title=moment(meinbge.donors.current.createdAt).tz('Europe/Berlin')) #{moment(meinbge.donors.current.createdAt).tz('Europe/Berlin').locale('de').fromNow()}]

block footerJs
  script.
    numeral.register('locale', 'de-cs', {
        delimiters: {
            thousands: '.',
            decimal: ','
        },
        abbreviations: {
            thousand: ' Tausend',
            million: ' Million',
        },
        currency: {
            symbol: '€'
        }
    });
    numeral.locale('de-cs')

    const chartData = {
      'chartChangeorgHourly': {
        labels: !{JSON.stringify(changeorg.chartHourly.labels)},
        data: !{JSON.stringify(changeorg.chartHourly.valuesRaw)},
      },
      'chartChangeorgDaily': {
        labels: !{JSON.stringify(changeorg.chartDaily.labels)},
        data: !{JSON.stringify(changeorg.chartDaily.valuesRaw)},
      },
      'chartBundestagHourly': {
        labels: !{JSON.stringify(bundestag.chartHourly.labels)},
        data: !{JSON.stringify(bundestag.chartHourly.valuesRaw)},
      },
      'chartBundestagDaily': {
        labels: !{JSON.stringify(bundestag.chartDaily.labels)},
        data: !{JSON.stringify(bundestag.chartDaily.valuesRaw)},
      },
      'chartYoumoveHourly': {
        labels: !{JSON.stringify(youmove.chartHourly.labels)},
        data: !{JSON.stringify(youmove.chartHourly.valuesRaw)},
      },
      'chartYoumoveDaily': {
        labels: !{JSON.stringify(youmove.chartDaily.labels)},
        data: !{JSON.stringify(youmove.chartDaily.valuesRaw)},
      },

    }

    for (const [key, value] of Object.entries(chartData)) {
      generateCharts(key, value)
    }

    function generateCharts(key, value) {
      const chartContext = document.getElementById(key).getContext('2d');
      const chart = new Chart(chartContext, {
        type: 'line',
        data: {
          labels: value.labels,
          datasets: [
            {
              label: 'Signatures',
              data: value.data,
              borderColor: '#cc5630',
              backgroundColor: 'rgba(0, 0, 0, 0)',
              cubicInterpolationMode: 'monotone',
            },
          ]
        },
        options: {
          legend: {
            display: false,
          },
          tooltips: {
            mode: 'index',
            callbacks: {
              label: function(tooltipItem, data) {
                numeral.locale('de-cs')
                return 'Signatures: ' + numeral(tooltipItem.yLabel).format('0,0');
              }
            }
          },
          scales: {
            yAxes: [{
                id: 'default',
                ticks: {
                  beginAtZero: true,
                  callback: function(label, index, labels) {
                    // when the floored value is the same as the value we have a whole number
                    if (Math.floor(label) === label) {
                      return numeral(label).format('0,0');
                    }
                    return;
                  },
                },
              },
            ],
          },
          elements: {
            line: {
              skipNull: false,
              drawNull: true,
            }
          }
        }
      });
    }